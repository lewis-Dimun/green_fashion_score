generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(USER)
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  fashionScores FashionScore[]
  sessions      Session[]
  responses     Response[]
  surveyResults SurveyResult[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FashionScore {
  id          String   @id @default(cuid())
  brand       String
  score       Float
  category    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
}

model Pillar {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  maxPoints   Int
  weight      Float
  createdAt   DateTime   @default(now())
  questions   Question[]
}

model Question {
  id        String     @id @default(cuid())
  text      String
  maxPoints Int
  createdAt DateTime   @default(now())
  isHidden  Boolean    @default(false)
  pillarId  String
  options   Option[]
  responses Response[]
  pillar    Pillar     @relation(fields: [pillarId], references: [id], onDelete: Cascade)

  @@unique([pillarId, text])
}

model Option {
  id         String   @id @default(cuid())
  label      String
  points     Int
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responses  Response[]

  @@unique([questionId, label])
}

model Response {
  id         String   @id @default(cuid())
  score      Float
  createdAt  DateTime @default(now())
  userId     String
  questionId String
  optionId   String?

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option   Option?  @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@index([userId])
  @@index([questionId])
  @@index([optionId])
}

model SurveyResult {
  id         String   @id @default(cuid())
  totalScore Float
  breakdown  Json
  createdAt  DateTime @default(now())
  userId     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@index([userId])
}

enum UserRole {
  ADMIN
  USER
}



